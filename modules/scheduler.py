import os
import json
import logging
from datetime import datetime
from modules.rss_reader import get_all_rss_entries
from modules.planner import create_daily_plan
from modules.post_filler import fill_plan_with_content
from modules.translator import translate_filled_plan

logger = logging.getLogger("Scheduler")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

OUTPUT_DIR = "output"

def ensure_dir(path):
    os.makedirs(path, exist_ok=True)

def get_today_plan_path(source):
    today_str = datetime.utcnow().strftime("%Y-%m-%d")
    return os.path.join(OUTPUT_DIR, source, f"plan_{today_str}.json")

def load_or_create_plan(source, entries):
    plan_path = get_today_plan_path(source)
    if os.path.exists(plan_path):
        logger.info(f"üìÑ –ü–ª–∞–Ω —É–∂–µ —ñ—Å–Ω—É—î: {plan_path}")
        with open(plan_path, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        logger.info(f"üß† –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –ø–ª–∞–Ω –¥–ª—è: {source}")
        plan = create_daily_plan(entries)
        ensure_dir(os.path.dirname(plan_path))
        with open(plan_path, "w", encoding="utf-8") as f:
            json.dump(plan, f, ensure_ascii=False, indent=2)
        return plan

def is_publication_due():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ä–∞ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç.
    –°–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True (–∑–∞–≥–ª—É—à–∫–∞).
    """
    return True

async def process_next_publication():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π.
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ publisher), —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞.
    """
    from modules.rss_reader import get_next_publication, remove_from_queue
    entry = get_next_publication()
    if entry:
        print(f"–ü—É–±–ª–∏–∫—É–µ–º: {entry['title']} ({entry['link']})")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å: await publisher.publish_post(entry)
        remove_from_queue(entry["id"])
    else:
        print("–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞.")

def main():
    logger.info("üîÅ –ü–æ—á–∏–Ω–∞—î–º–æ —Ü–∏–∫–ª —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞–Ω—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π")
    all_entries = get_all_rss_entries()

    for source, entries in all_entries.items():
        plan = load_or_create_plan(source, entries)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ—Å—Ç–∏ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if any("text" not in post for post in plan["posts"]):
            logger.info(f"‚úçÔ∏è –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {source}")
            plan = fill_plan_with_content(plan)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–µ—Ä–µ–∫–ª–∞–¥–∏
        if any("translations" not in post for post in plan["posts"]):
            logger.info(f"üåê –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –ø–æ—Å—Ç–∏: {source}")
            plan = translate_filled_plan(plan)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω
        plan_path = get_today_plan_path(source)
        with open(plan_path, "w", encoding="utf-8") as f:
            json.dump(plan, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ü–ª–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {plan_path}")

if __name__ == "__main__":
    main()