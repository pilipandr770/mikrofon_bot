import os
import json
import time
from datetime import datetime
from modules.config_loader import load_config
from modules.publisher import telegram  # —ñ–Ω—à—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –∑–≥–æ–¥–æ–º

PLAN_DIR = "output"
SUPPORTED_LANGS = ["uk", "en", "de"]


def get_today_plan():
    today_str = datetime.today().strftime("%Y-%m-%d")
    for folder in os.listdir(PLAN_DIR):
        subdir = os.path.join(PLAN_DIR, folder)
        if os.path.isdir(subdir):
            plan_path = os.path.join(subdir, f"plan_{today_str}.json")
            if os.path.exists(plan_path):
                with open(plan_path, "r", encoding="utf-8") as f:
                    plan = json.load(f)
                return plan, plan_path
    return None, None


def publish_all_languages():
    plan, path = get_today_plan()
    if not plan:
        print("‚ùå –ü–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
        return

    for lang in SUPPORTED_LANGS:
        print(f"üåç –ü—É–±–ª—ñ–∫—É—î–º–æ –º–æ–≤–æ—é: {lang.upper()}")
        for i, post in enumerate(plan["posts"]):
            if post.get("status") != "translated":
                continue

            if post.get(f"status_{lang}") == "published":
                continue

            text = post.get("translations", {}).get(lang)
            image_name = f"image_{str(i+1).zfill(3)}.png"
            image_path = os.path.join(PLAN_DIR, plan["source"], image_name)

            if not text or not os.path.exists(image_path):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ—Å—Ç {i+1} ({lang}) ‚Äî –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –∞–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                continue

            success = telegram.send_telegram(text, image_path, lang)
            if success:
                post[f"status_{lang}"] = "published"
                with open(path, "w", encoding="utf-8") as f:
                    json.dump(plan, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç {i+1} ({lang})")
                time.sleep(2)  # –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ, –∞–ª–µ –∫—Ä–∞—â–µ —É–Ω–∏–∫–∞—Ç–∏ —Å–ø–∞–º—É API
            else:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç {i+1} ({lang})")


def publish_next_set():
    plan, path = get_today_plan()
    if not plan:
        print("‚ùå –ü–ª–∞–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
        return

    # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ
    for i, post in enumerate(plan["posts"]):
        if post.get("status") != "translated":
            continue
        if all(post.get(f"status_{lang}") == "published" for lang in SUPPORTED_LANGS):
            continue
        # –ü—É–±–ª–∏–∫—É–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
        for lang in SUPPORTED_LANGS:
            if post.get(f"status_{lang}") == "published":
                continue
            text = post.get("translations", {}).get(lang)
            image_name = f"image_{str(i+1).zfill(3)}.png"
            image_path = os.path.join(PLAN_DIR, plan["source"], image_name)
            if not text or not os.path.exists(image_path):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ—Å—Ç {i+1} ({lang}) ‚Äî –Ω–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –∞–±–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                continue
            success = telegram.send_telegram(text, image_path, lang)
            if success:
                post[f"status_{lang}"] = "published"
                with open(path, "w", encoding="utf-8") as f:
                    json.dump(plan, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç {i+1} ({lang})")
                # –ù–µ –¥–µ–ª–∞–µ–º time.sleep, —á—Ç–æ–±—ã –≤—Å–µ —è–∑—ã–∫–∏ —É—à–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            else:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ—Å—Ç {i+1} ({lang})")
        # –ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–∞ –≤—Å–µ —è–∑—ã–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        break
    else:
        print("‚úÖ –í—Å—ñ –ø–æ—Å—Ç–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ!")


if __name__ == "__main__":
    import schedule
    import time
    print("‚è≥ Publisher –∑–∞–ø—É—â–µ–Ω–æ. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏...")
    schedule.every(2).hours.do(publish_next_set)
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ä–∞–∑—É –ø—É–±–ª–∏–∫—É–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é
    publish_next_set()
    while True:
        schedule.run_pending()
        time.sleep(60)
