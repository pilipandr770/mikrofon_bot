import time
import json
import os
from datetime import date

from modules import rss_reader, planner, post_filler, translator, image_generator, publisher_main as publisher

OUTPUT_DIR = "output"

def get_plan_path(source):
    today = date.today().isoformat()
    return os.path.join(OUTPUT_DIR, source, f"plan_{today}.json")

def save_plan(plan, path):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(plan, f, ensure_ascii=False, indent=2)

def main():
    print("üì• 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω —ñ–∑ RSS —Ç–∞ Reddit...")
    # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    rss_reader.fetch_latest_entries()
    entries_by_source = rss_reader.get_all_rss_entries()

    for source, source_entries in entries_by_source.items():
        print(f"üóÇ –î–∂–µ—Ä–µ–ª–æ: {source} ‚Äî {len(source_entries)} –Ω–æ–≤–∏–Ω")
        plan_path = get_plan_path(source)
        # –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        if os.path.exists(plan_path):
            with open(plan_path, "r", encoding="utf-8") as f:
                plan = json.load(f)
            print("üìÑ –ü–ª–∞–Ω –≤–∂–µ —ñ—Å–Ω—É—î, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        else:
            print("üß† –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –ø–ª–∞–Ω...")
            plan_raw = planner.create_daily_plan(source_entries)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(plan_raw, list) or not all(isinstance(post, dict) and "title" in post and "idea" in post for post in plan_raw):
                print("‚ùå –ü–æ–º–∏–ª–∫–∞: create_daily_plan –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É:", plan_raw)
                return
            plan = {
                "date": str(date.today()),
                "source": source,
                "posts": [
                    {"title": post["title"], "idea": post["idea"], "status": "empty"}
                    for post in plan_raw
                ]
            }
            os.makedirs(os.path.dirname(plan_path), exist_ok=True)
            save_plan(plan, plan_path)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö –ø–æ—Å—Ç–æ–≤
        if any(post.get("status") == "empty" for post in plan["posts"]):
            print("‚úçÔ∏è 2. –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ —Ç–∞ –ø—Ä–æ–º–ø—Ç–∏...")
            plan = post_filler.fill_plan_with_content(plan)
            save_plan(plan, plan_path)

        # –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if any(post.get("status") == "filled" for post in plan["posts"]):
            print("üåê 3. –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç–∏...")
            plan = translator.translate_filled_plan(plan)
            save_plan(plan, plan_path)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤, –≥–¥–µ –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –Ω–æ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if any("image_prompt" in post and not post.get("image_generated") for post in plan["posts"]):
            print("üñº 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
            plan = image_generator.generate_images_from_plan(plan)
            save_plan(plan, plan_path)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        print("üì§ 5. –ü–æ—á–∏–Ω–∞—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é...")
        publisher.publish_all_languages()

if __name__ == "__main__":
    main()
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
